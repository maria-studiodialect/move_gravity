{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","dependencies":[{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\package.json","includedInParent":true,"mtime":1669629467207},{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\.babelrc","includedInParent":true,"mtime":1669629456382},{"name":"./sigmoid","loc":{"line":40,"column":24},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\tensors_to_landmarks.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\sigmoid.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.tensorsToLandmarks = void 0;\r\nvar sigmoid_1 = require(\"./sigmoid\");\r\nfunction applyActivation(activation, value) {\r\n    return activation === 'none' ? value : (0, sigmoid_1.sigmoid)(value);\r\n}\r\n/**\r\n * A calculator for converting Tensors from regression models into landmarks.\r\n * Note that if the landmarks in the tensor has more than 5 dimensions, only the\r\n * first 5 dimensions will be converted to [x,y,z, visibility, presence]. The\r\n * latter two fields may also stay unset if such attributes are not supported in\r\n * the model.\r\n * @param landmarkTensor List of Tensors of type float32. Only the first tensor\r\n * will be used. The size of the values must be (num_dimension x num_landmarks).\r\n * @param flipHorizontally Optional. Whether to flip landmarks horizontally or\r\n * not. Overrides corresponding field in config.\r\n * @param flipVertically Optional. Whether to flip landmarks vertically or not.\r\n * Overrides corresponding field in config.\r\n *\r\n * @param config\r\n *\r\n * @returns Normalized landmarks.\r\n */\r\nfunction tensorsToLandmarks(landmarkTensor, config, flipHorizontally, flipVertically) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var numValues, numDimensions, rawLandmarks, outputLandmarks, ld, offset, landmark, i, landmark;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    flipHorizontally = flipHorizontally || config.flipHorizontally || false;\r\n                    flipVertically = flipVertically || config.flipVertically || false;\r\n                    numValues = landmarkTensor.size;\r\n                    numDimensions = numValues / config.numLandmarks;\r\n                    return [4 /*yield*/, landmarkTensor.data()];\r\n                case 1:\r\n                    rawLandmarks = _a.sent();\r\n                    outputLandmarks = [];\r\n                    for (ld = 0; ld < config.numLandmarks; ++ld) {\r\n                        offset = ld * numDimensions;\r\n                        landmark = { x: 0, y: 0 };\r\n                        if (flipHorizontally) {\r\n                            landmark.x = config.inputImageWidth - rawLandmarks[offset];\r\n                        }\r\n                        else {\r\n                            landmark.x = rawLandmarks[offset];\r\n                        }\r\n                        if (numDimensions > 1) {\r\n                            if (flipVertically) {\r\n                                landmark.y = config.inputImageHeight - rawLandmarks[offset + 1];\r\n                            }\r\n                            else {\r\n                                landmark.y = rawLandmarks[offset + 1];\r\n                            }\r\n                        }\r\n                        if (numDimensions > 2) {\r\n                            landmark.z = rawLandmarks[offset + 2];\r\n                        }\r\n                        if (numDimensions > 3) {\r\n                            landmark.score = applyActivation(config.visibilityActivation, rawLandmarks[offset + 3]);\r\n                        }\r\n                        // presence is in rawLandmarks[offset + 4], we don't expose it.\r\n                        outputLandmarks.push(landmark);\r\n                    }\r\n                    for (i = 0; i < outputLandmarks.length; ++i) {\r\n                        landmark = outputLandmarks[i];\r\n                        landmark.x = landmark.x / config.inputImageWidth;\r\n                        landmark.y = landmark.y / config.inputImageHeight;\r\n                        // Scale Z coordinate as X + allow additional uniform normalization.\r\n                        landmark.z = landmark.z / config.inputImageWidth / (config.normalizeZ || 1);\r\n                    }\r\n                    return [2 /*return*/, outputLandmarks];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.tensorsToLandmarks = tensorsToLandmarks;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}}],"sources":{"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_landmarks.js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.tensorsToLandmarks = void 0;\r\nvar sigmoid_1 = require(\"./sigmoid\");\r\nfunction applyActivation(activation, value) {\r\n    return activation === 'none' ? value : (0, sigmoid_1.sigmoid)(value);\r\n}\r\n/**\r\n * A calculator for converting Tensors from regression models into landmarks.\r\n * Note that if the landmarks in the tensor has more than 5 dimensions, only the\r\n * first 5 dimensions will be converted to [x,y,z, visibility, presence]. The\r\n * latter two fields may also stay unset if such attributes are not supported in\r\n * the model.\r\n * @param landmarkTensor List of Tensors of type float32. Only the first tensor\r\n * will be used. The size of the values must be (num_dimension x num_landmarks).\r\n * @param flipHorizontally Optional. Whether to flip landmarks horizontally or\r\n * not. Overrides corresponding field in config.\r\n * @param flipVertically Optional. Whether to flip landmarks vertically or not.\r\n * Overrides corresponding field in config.\r\n *\r\n * @param config\r\n *\r\n * @returns Normalized landmarks.\r\n */\r\nfunction tensorsToLandmarks(landmarkTensor, config, flipHorizontally, flipVertically) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var numValues, numDimensions, rawLandmarks, outputLandmarks, ld, offset, landmark, i, landmark;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    flipHorizontally = flipHorizontally || config.flipHorizontally || false;\r\n                    flipVertically = flipVertically || config.flipVertically || false;\r\n                    numValues = landmarkTensor.size;\r\n                    numDimensions = numValues / config.numLandmarks;\r\n                    return [4 /*yield*/, landmarkTensor.data()];\r\n                case 1:\r\n                    rawLandmarks = _a.sent();\r\n                    outputLandmarks = [];\r\n                    for (ld = 0; ld < config.numLandmarks; ++ld) {\r\n                        offset = ld * numDimensions;\r\n                        landmark = { x: 0, y: 0 };\r\n                        if (flipHorizontally) {\r\n                            landmark.x = config.inputImageWidth - rawLandmarks[offset];\r\n                        }\r\n                        else {\r\n                            landmark.x = rawLandmarks[offset];\r\n                        }\r\n                        if (numDimensions > 1) {\r\n                            if (flipVertically) {\r\n                                landmark.y = config.inputImageHeight - rawLandmarks[offset + 1];\r\n                            }\r\n                            else {\r\n                                landmark.y = rawLandmarks[offset + 1];\r\n                            }\r\n                        }\r\n                        if (numDimensions > 2) {\r\n                            landmark.z = rawLandmarks[offset + 2];\r\n                        }\r\n                        if (numDimensions > 3) {\r\n                            landmark.score = applyActivation(config.visibilityActivation, rawLandmarks[offset + 3]);\r\n                        }\r\n                        // presence is in rawLandmarks[offset + 4], we don't expose it.\r\n                        outputLandmarks.push(landmark);\r\n                    }\r\n                    for (i = 0; i < outputLandmarks.length; ++i) {\r\n                        landmark = outputLandmarks[i];\r\n                        landmark.x = landmark.x / config.inputImageWidth;\r\n                        landmark.y = landmark.y / config.inputImageHeight;\r\n                        // Scale Z coordinate as X + allow additional uniform normalization.\r\n                        landmark.z = landmark.z / config.inputImageWidth / (config.normalizeZ || 1);\r\n                    }\r\n                    return [2 /*return*/, outputLandmarks];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.tensorsToLandmarks = tensorsToLandmarks;\r\n"},"lineCount":114}},"error":null,"hash":"37bf07aab0a5dddddc78dbec4acc342c","cacheData":{"env":{}}}