{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","dependencies":[{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\package.json","includedInParent":true,"mtime":1669629467207},{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\.babelrc","includedInParent":true,"mtime":1669629456382},{"name":"@tensorflow/tfjs-core","loc":{"line":67,"column":17},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\refine_landmarks_from_heatmap.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\move_wip\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.refineLandmarksFromHeatmap = void 0;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\n/**\r\n * A calculator that refines landmarks using corresponding heatmap area.\r\n *\r\n * High level algorithm\r\n * For each landmark, we replace original value with a value calculated from the\r\n * area in heatmap close to original landmark position (the area is defined by\r\n * config.kernelSize). To calculate new coordinate from heatmap we calculate an\r\n * weighted average inside the kernel. We update the landmark if heatmap is\r\n * confident in it's prediction i.e. max(heatmap) in kernel is at least bigger\r\n * than config.minConfidenceToRefine.\r\n * @param landmarks List of lardmarks to refine.\r\n * @param heatmapTensor The heatmap for the landmarks with shape\r\n *     [height, width, channel]. The channel dimension has to be the same as\r\n *     the number of landmarks.\r\n * @param config The config for refineLandmarksFromHeap,\r\n *     see `RefineLandmarksFromHeatmapConfig` for detail.\r\n *\r\n * @returns Normalized landmarks.\r\n */\r\nfunction refineLandmarksFromHeatmap(landmarks, heatmapTensor, config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var $heatmapTensor, _a, hmHeight, hmWidth, hmChannels, outLandmarks, heatmapBuf, i, landmark, outLandmark, centerCol, centerRow, offset, beginCol, endCol, beginRow, endRow, sum, weightedCol, weightedRow, maxValue, row, col, confidence;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    $heatmapTensor = tf.squeeze(heatmapTensor, [0]);\r\n                    _a = $heatmapTensor.shape, hmHeight = _a[0], hmWidth = _a[1], hmChannels = _a[2];\r\n                    if (landmarks.length !== hmChannels) {\r\n                        throw new Error('Expected heatmap to have same number of channels ' +\r\n                            'as the number of landmarks. But got landmarks length: ' +\r\n                            \"\".concat(landmarks.length, \", heatmap length: \").concat(hmChannels));\r\n                    }\r\n                    outLandmarks = [];\r\n                    return [4 /*yield*/, $heatmapTensor.buffer()];\r\n                case 1:\r\n                    heatmapBuf = _b.sent();\r\n                    for (i = 0; i < landmarks.length; i++) {\r\n                        landmark = landmarks[i];\r\n                        outLandmark = __assign({}, landmark);\r\n                        outLandmarks.push(outLandmark);\r\n                        centerCol = Math.trunc(outLandmark.x * hmWidth);\r\n                        centerRow = Math.trunc(outLandmark.y * hmHeight);\r\n                        // Point is outside of the image let's keep it intact.\r\n                        if (centerCol < 0 || centerCol >= hmWidth || centerRow < 0 ||\r\n                            centerCol >= hmHeight) {\r\n                            continue;\r\n                        }\r\n                        offset = Math.trunc((config.kernelSize - 1) / 2);\r\n                        beginCol = Math.max(0, centerCol - offset);\r\n                        endCol = Math.min(hmWidth, centerCol + offset + 1);\r\n                        beginRow = Math.max(0, centerRow - offset);\r\n                        endRow = Math.min(hmHeight, centerRow + offset + 1);\r\n                        sum = 0;\r\n                        weightedCol = 0;\r\n                        weightedRow = 0;\r\n                        maxValue = 0;\r\n                        // Main loop. Go over kernel and calculate weighted sum of coordinates,\r\n                        // sum of weights and max weights.\r\n                        for (row = beginRow; row < endRow; ++row) {\r\n                            for (col = beginCol; col < endCol; ++col) {\r\n                                confidence = heatmapBuf.get(row, col, i);\r\n                                sum += confidence;\r\n                                maxValue = Math.max(maxValue, confidence);\r\n                                weightedCol += col * confidence;\r\n                                weightedRow += row * confidence;\r\n                            }\r\n                        }\r\n                        if (maxValue >= config.minConfidenceToRefine && sum > 0) {\r\n                            outLandmark.x = weightedCol / hmWidth / sum;\r\n                            outLandmark.y = weightedRow / hmHeight / sum;\r\n                        }\r\n                    }\r\n                    $heatmapTensor.dispose();\r\n                    return [2 /*return*/, outLandmarks];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.refineLandmarksFromHeatmap = refineLandmarksFromHeatmap;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}}],"sources":{"node_modules/@tensorflow-models/pose-detection/shared/calculators/refine_landmarks_from_heatmap.js":"\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.refineLandmarksFromHeatmap = void 0;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\n/**\r\n * A calculator that refines landmarks using corresponding heatmap area.\r\n *\r\n * High level algorithm\r\n * For each landmark, we replace original value with a value calculated from the\r\n * area in heatmap close to original landmark position (the area is defined by\r\n * config.kernelSize). To calculate new coordinate from heatmap we calculate an\r\n * weighted average inside the kernel. We update the landmark if heatmap is\r\n * confident in it's prediction i.e. max(heatmap) in kernel is at least bigger\r\n * than config.minConfidenceToRefine.\r\n * @param landmarks List of lardmarks to refine.\r\n * @param heatmapTensor The heatmap for the landmarks with shape\r\n *     [height, width, channel]. The channel dimension has to be the same as\r\n *     the number of landmarks.\r\n * @param config The config for refineLandmarksFromHeap,\r\n *     see `RefineLandmarksFromHeatmapConfig` for detail.\r\n *\r\n * @returns Normalized landmarks.\r\n */\r\nfunction refineLandmarksFromHeatmap(landmarks, heatmapTensor, config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var $heatmapTensor, _a, hmHeight, hmWidth, hmChannels, outLandmarks, heatmapBuf, i, landmark, outLandmark, centerCol, centerRow, offset, beginCol, endCol, beginRow, endRow, sum, weightedCol, weightedRow, maxValue, row, col, confidence;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    $heatmapTensor = tf.squeeze(heatmapTensor, [0]);\r\n                    _a = $heatmapTensor.shape, hmHeight = _a[0], hmWidth = _a[1], hmChannels = _a[2];\r\n                    if (landmarks.length !== hmChannels) {\r\n                        throw new Error('Expected heatmap to have same number of channels ' +\r\n                            'as the number of landmarks. But got landmarks length: ' +\r\n                            \"\".concat(landmarks.length, \", heatmap length: \").concat(hmChannels));\r\n                    }\r\n                    outLandmarks = [];\r\n                    return [4 /*yield*/, $heatmapTensor.buffer()];\r\n                case 1:\r\n                    heatmapBuf = _b.sent();\r\n                    for (i = 0; i < landmarks.length; i++) {\r\n                        landmark = landmarks[i];\r\n                        outLandmark = __assign({}, landmark);\r\n                        outLandmarks.push(outLandmark);\r\n                        centerCol = Math.trunc(outLandmark.x * hmWidth);\r\n                        centerRow = Math.trunc(outLandmark.y * hmHeight);\r\n                        // Point is outside of the image let's keep it intact.\r\n                        if (centerCol < 0 || centerCol >= hmWidth || centerRow < 0 ||\r\n                            centerCol >= hmHeight) {\r\n                            continue;\r\n                        }\r\n                        offset = Math.trunc((config.kernelSize - 1) / 2);\r\n                        beginCol = Math.max(0, centerCol - offset);\r\n                        endCol = Math.min(hmWidth, centerCol + offset + 1);\r\n                        beginRow = Math.max(0, centerRow - offset);\r\n                        endRow = Math.min(hmHeight, centerRow + offset + 1);\r\n                        sum = 0;\r\n                        weightedCol = 0;\r\n                        weightedRow = 0;\r\n                        maxValue = 0;\r\n                        // Main loop. Go over kernel and calculate weighted sum of coordinates,\r\n                        // sum of weights and max weights.\r\n                        for (row = beginRow; row < endRow; ++row) {\r\n                            for (col = beginCol; col < endCol; ++col) {\r\n                                confidence = heatmapBuf.get(row, col, i);\r\n                                sum += confidence;\r\n                                maxValue = Math.max(maxValue, confidence);\r\n                                weightedCol += col * confidence;\r\n                                weightedRow += row * confidence;\r\n                            }\r\n                        }\r\n                        if (maxValue >= config.minConfidenceToRefine && sum > 0) {\r\n                            outLandmark.x = weightedCol / hmWidth / sum;\r\n                            outLandmark.y = weightedRow / hmHeight / sum;\r\n                        }\r\n                    }\r\n                    $heatmapTensor.dispose();\r\n                    return [2 /*return*/, outLandmarks];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.refineLandmarksFromHeatmap = refineLandmarksFromHeatmap;\r\n"},"lineCount":147}},"error":null,"hash":"9d291b93aa333244d6f09659443dbeea","cacheData":{"env":{}}}