{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","dependencies":[{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity3\\package.json","includedInParent":true,"mtime":1669629456377},{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity3\\.babelrc","includedInParent":true,"mtime":1669629444948},{"name":"@tensorflow/tfjs-core","loc":{"line":4,"column":17},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity3\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\segmentation_smoothing.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity3\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nexports.__esModule = true;\r\nexports.smoothSegmentation = void 0;\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\n/**\r\n * A calculator for mixing two segmentation masks together, based on an\r\n * uncertantity probability estimate.\r\n * @param prevMaks Segmentation mask from previous image.\r\n * @param newMask Segmentation mask of current image.\r\n * @param config Contains ratio of amount of previous mask to blend with\r\n *     current.\r\n *\r\n * @returns Image mask.\r\n */\r\n// ref:\r\n// https://github.com/google/mediapipe/blob/master/mediapipe/calculators/image/segmentation_smoothing_calculator.cc\r\nfunction smoothSegmentation(prevMask, newMask, config) {\r\n    if (tf.getBackend() === 'webgl') {\r\n        // Same as implementation in the else case but reduces number of shader\r\n        // calls to 1 instead of 17.\r\n        return smoothSegmentationWebGL(prevMask, newMask, config);\r\n    }\r\n    return tf.tidy(function () {\r\n        /*\r\n         * Assume p := newMaskValue\r\n         * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\r\n         * uncertainty alpha(p) =\r\n         *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\r\n         * uncertainty]\r\n         *\r\n         * The following polynomial approximates uncertainty alpha as a\r\n         * function of (p + 0.5):\r\n         */\r\n        var c1 = 5.68842;\r\n        var c2 = -0.748699;\r\n        var c3 = -57.8051;\r\n        var c4 = 291.309;\r\n        var c5 = -624.717;\r\n        var t = tf.sub(newMask, 0.5);\r\n        var x = tf.square(t);\r\n        // Per element calculation is: 1.0 - Math.min(1.0, x * (c1 + x * (c2 + x\r\n        // * (c3 + x * (c4 + x * c5))))).\r\n        var uncertainty = tf.sub(1, tf.minimum(1, tf.mul(x, tf.add(c1, tf.mul(x, tf.add(c2, tf.mul(x, tf.add(c3, tf.mul(x, tf.add(c4, tf.mul(x, c5)))))))))));\r\n        // Per element calculation is: newMaskValue + (prevMaskValue -\r\n        // newMaskValue) * (uncertainty * combineWithPreviousRatio).\r\n        return tf.add(newMask, tf.mul(tf.sub(prevMask, newMask), tf.mul(uncertainty, config.combineWithPreviousRatio)));\r\n    });\r\n}\r\nexports.smoothSegmentation = smoothSegmentation;\r\nfunction smoothSegmentationWebGL(prevMask, newMask, config) {\r\n    var ratio = config.combineWithPreviousRatio.toFixed(2);\r\n    var program = {\r\n        variableNames: ['prevMask', 'newMask'],\r\n        outputShape: prevMask.shape,\r\n        userCode: \"\\n  void main() {\\n      ivec2 coords = getOutputCoords();\\n      int height = coords[0];\\n      int width = coords[1];\\n\\n      float prevMaskValue = getPrevMask(height, width);\\n      float newMaskValue = getNewMask(height, width);\\n\\n      /*\\n      * Assume p := newMaskValue\\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\\n      * uncertainty alpha(p) =\\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\\n      * uncertainty]\\n      *\\n      * The following polynomial approximates uncertainty alpha as a\\n      * function of (p + 0.5):\\n      */\\n      const float c1 = 5.68842;\\n      const float c2 = -0.748699;\\n      const float c3 = -57.8051;\\n      const float c4 = 291.309;\\n      const float c5 = -624.717;\\n      float t = newMaskValue - 0.5;\\n      float x = t * t;\\n\\n      float uncertainty =\\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\\n\\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\\n                             (uncertainty * \".concat(ratio, \");\\n\\n      setOutput(outputValue);\\n    }\\n\")\r\n    };\r\n    var webglBackend = tf.backend();\r\n    return tf.tidy(function () {\r\n        var outputTensorInfo = webglBackend.compileAndRun(program, [prevMask, newMask]);\r\n        return tf.engine().makeTensorFromDataId(outputTensorInfo.dataId, outputTensorInfo.shape, outputTensorInfo.dtype);\r\n    });\r\n}\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}}],"sources":{"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js":"\"use strict\";\r\nexports.__esModule = true;\r\nexports.smoothSegmentation = void 0;\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\n/**\r\n * A calculator for mixing two segmentation masks together, based on an\r\n * uncertantity probability estimate.\r\n * @param prevMaks Segmentation mask from previous image.\r\n * @param newMask Segmentation mask of current image.\r\n * @param config Contains ratio of amount of previous mask to blend with\r\n *     current.\r\n *\r\n * @returns Image mask.\r\n */\r\n// ref:\r\n// https://github.com/google/mediapipe/blob/master/mediapipe/calculators/image/segmentation_smoothing_calculator.cc\r\nfunction smoothSegmentation(prevMask, newMask, config) {\r\n    if (tf.getBackend() === 'webgl') {\r\n        // Same as implementation in the else case but reduces number of shader\r\n        // calls to 1 instead of 17.\r\n        return smoothSegmentationWebGL(prevMask, newMask, config);\r\n    }\r\n    return tf.tidy(function () {\r\n        /*\r\n         * Assume p := newMaskValue\r\n         * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\r\n         * uncertainty alpha(p) =\r\n         *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\r\n         * uncertainty]\r\n         *\r\n         * The following polynomial approximates uncertainty alpha as a\r\n         * function of (p + 0.5):\r\n         */\r\n        var c1 = 5.68842;\r\n        var c2 = -0.748699;\r\n        var c3 = -57.8051;\r\n        var c4 = 291.309;\r\n        var c5 = -624.717;\r\n        var t = tf.sub(newMask, 0.5);\r\n        var x = tf.square(t);\r\n        // Per element calculation is: 1.0 - Math.min(1.0, x * (c1 + x * (c2 + x\r\n        // * (c3 + x * (c4 + x * c5))))).\r\n        var uncertainty = tf.sub(1, tf.minimum(1, tf.mul(x, tf.add(c1, tf.mul(x, tf.add(c2, tf.mul(x, tf.add(c3, tf.mul(x, tf.add(c4, tf.mul(x, c5)))))))))));\r\n        // Per element calculation is: newMaskValue + (prevMaskValue -\r\n        // newMaskValue) * (uncertainty * combineWithPreviousRatio).\r\n        return tf.add(newMask, tf.mul(tf.sub(prevMask, newMask), tf.mul(uncertainty, config.combineWithPreviousRatio)));\r\n    });\r\n}\r\nexports.smoothSegmentation = smoothSegmentation;\r\nfunction smoothSegmentationWebGL(prevMask, newMask, config) {\r\n    var ratio = config.combineWithPreviousRatio.toFixed(2);\r\n    var program = {\r\n        variableNames: ['prevMask', 'newMask'],\r\n        outputShape: prevMask.shape,\r\n        userCode: \"\\n  void main() {\\n      ivec2 coords = getOutputCoords();\\n      int height = coords[0];\\n      int width = coords[1];\\n\\n      float prevMaskValue = getPrevMask(height, width);\\n      float newMaskValue = getNewMask(height, width);\\n\\n      /*\\n      * Assume p := newMaskValue\\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\\n      * uncertainty alpha(p) =\\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\\n      * uncertainty]\\n      *\\n      * The following polynomial approximates uncertainty alpha as a\\n      * function of (p + 0.5):\\n      */\\n      const float c1 = 5.68842;\\n      const float c2 = -0.748699;\\n      const float c3 = -57.8051;\\n      const float c4 = 291.309;\\n      const float c5 = -624.717;\\n      float t = newMaskValue - 0.5;\\n      float x = t * t;\\n\\n      float uncertainty =\\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\\n\\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\\n                             (uncertainty * \".concat(ratio, \");\\n\\n      setOutput(outputValue);\\n    }\\n\")\r\n    };\r\n    var webglBackend = tf.backend();\r\n    return tf.tidy(function () {\r\n        var outputTensorInfo = webglBackend.compileAndRun(program, [prevMask, newMask]);\r\n        return tf.engine().makeTensorFromDataId(outputTensorInfo.dataId, outputTensorInfo.shape, outputTensorInfo.dtype);\r\n    });\r\n}\r\n"},"lineCount":63}},"error":null,"hash":"e2fdb5acd48ade89ff85ad21e13ee2bf","cacheData":{"env":{}}}