{"id":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","dependencies":[{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\package.json","includedInParent":true,"mtime":1669629456377},{"name":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\.babelrc","includedInParent":true,"mtime":1669629444948},{"name":"@tensorflow/tfjs-converter","loc":{"line":56,"column":18},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow\\tfjs-converter\\dist\\index.js"},{"name":"@tensorflow/tfjs-core","loc":{"line":57,"column":17},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"},{"name":"../calculators/bounding_box_tracker","loc":{"line":58,"column":37},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\calculators\\bounding_box_tracker.js"},{"name":"../calculators/keypoint_tracker","loc":{"line":59,"column":33},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\calculators\\keypoint_tracker.js"},{"name":"../calculators/types","loc":{"line":60,"column":22},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\calculators\\types.js"},{"name":"../constants","loc":{"line":61,"column":26},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\constants.js"},{"name":"../shared/calculators/constants","loc":{"line":62,"column":26},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\constants.js"},{"name":"../shared/calculators/image_utils","loc":{"line":63,"column":28},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\image_utils.js"},{"name":"../shared/calculators/is_video","loc":{"line":64,"column":25},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\is_video.js"},{"name":"../shared/filters/keypoints_one_euro_filter","loc":{"line":65,"column":42},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\shared\\filters\\keypoints_one_euro_filter.js"},{"name":"../shared/filters/low_pass_filter","loc":{"line":66,"column":32},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\shared\\filters\\low_pass_filter.js"},{"name":"../types","loc":{"line":67,"column":22},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\types.js"},{"name":"../util","loc":{"line":68,"column":21},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\util.js"},{"name":"./constants","loc":{"line":69,"column":26},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\constants.js"},{"name":"./crop_utils","loc":{"line":70,"column":27},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\crop_utils.js"},{"name":"./detector_utils","loc":{"line":71,"column":31},"parent":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector.js","resolved":"C:\\Users\\maria\\code\\move_pose-detection\\demos\\gravity\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\detector_utils.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.load = void 0;\r\nvar tfc = require(\"@tensorflow/tfjs-converter\");\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar bounding_box_tracker_1 = require(\"../calculators/bounding_box_tracker\");\r\nvar keypoint_tracker_1 = require(\"../calculators/keypoint_tracker\");\r\nvar types_1 = require(\"../calculators/types\");\r\nvar constants_1 = require(\"../constants\");\r\nvar constants_2 = require(\"../shared/calculators/constants\");\r\nvar image_utils_1 = require(\"../shared/calculators/image_utils\");\r\nvar is_video_1 = require(\"../shared/calculators/is_video\");\r\nvar keypoints_one_euro_filter_1 = require(\"../shared/filters/keypoints_one_euro_filter\");\r\nvar low_pass_filter_1 = require(\"../shared/filters/low_pass_filter\");\r\nvar types_2 = require(\"../types\");\r\nvar util_1 = require(\"../util\");\r\nvar constants_3 = require(\"./constants\");\r\nvar crop_utils_1 = require(\"./crop_utils\");\r\nvar detector_utils_1 = require(\"./detector_utils\");\r\n/**\r\n * MoveNet detector class.\r\n */\r\nvar MoveNetDetector = /** @class */ (function () {\r\n    function MoveNetDetector(moveNetModel, config) {\r\n        this.moveNetModel = moveNetModel;\r\n        this.modelInputResolution = { height: 0, width: 0 };\r\n        this.keypointIndexByName = (0, util_1.getKeypointIndexByName)(types_2.SupportedModels.MoveNet);\r\n        // Only single-pose models have a fixed input resolution.\r\n        if (config.modelType === constants_3.SINGLEPOSE_LIGHTNING) {\r\n            this.modelInputResolution.width = constants_3.MOVENET_SINGLEPOSE_LIGHTNING_RESOLUTION;\r\n            this.modelInputResolution.height =\r\n                constants_3.MOVENET_SINGLEPOSE_LIGHTNING_RESOLUTION;\r\n        }\r\n        else if (config.modelType === constants_3.SINGLEPOSE_THUNDER) {\r\n            this.modelInputResolution.width = constants_3.MOVENET_SINGLEPOSE_THUNDER_RESOLUTION;\r\n            this.modelInputResolution.height = constants_3.MOVENET_SINGLEPOSE_THUNDER_RESOLUTION;\r\n        }\r\n        this.multiPoseModel = config.modelType === constants_3.MULTIPOSE_LIGHTNING;\r\n        if (!this.multiPoseModel) {\r\n            this.keypointFilter = new keypoints_one_euro_filter_1.KeypointsOneEuroFilter(constants_3.KEYPOINT_FILTER_CONFIG);\r\n            this.cropRegionFilterYMin = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n            this.cropRegionFilterXMin = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n            this.cropRegionFilterYMax = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n            this.cropRegionFilterXMax = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n        }\r\n        this.enableSmoothing = config.enableSmoothing;\r\n        if (config.minPoseScore) {\r\n            this.minPoseScore = config.minPoseScore;\r\n        }\r\n        else {\r\n            this.minPoseScore = constants_3.DEFAULT_MIN_POSE_SCORE;\r\n        }\r\n        if (config.multiPoseMaxDimension) {\r\n            this.multiPoseMaxDimension = config.multiPoseMaxDimension;\r\n        }\r\n        else {\r\n            this.multiPoseMaxDimension = constants_3.MOVENET_MULTIPOSE_DEFAULT_MAX_DIMENSION;\r\n        }\r\n        this.enableTracking = config.enableTracking;\r\n        if (this.multiPoseModel && this.enableTracking) {\r\n            if (config.trackerType === types_1.TrackerType.Keypoint) {\r\n                this.tracker = new keypoint_tracker_1.KeypointTracker(config.trackerConfig);\r\n            }\r\n            else if (config.trackerType === types_1.TrackerType.BoundingBox) {\r\n                this.tracker = new bounding_box_tracker_1.BoundingBoxTracker(config.trackerConfig);\r\n            }\r\n            if (this.enableSmoothing) {\r\n                this.keypointFilterMap = new Map();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Runs inference on an image using a model that is assumed to be a single\r\n     * person keypoint model that outputs 17 keypoints.\r\n     *\r\n     * @param inputImage 4D tensor containing the input image. Should be of size\r\n     * [1, modelHeight, modelWidth, 3].\r\n     * @return A `Pose`.\r\n     */\r\n    MoveNetDetector.prototype.runSinglePersonPoseModel = function (inputImage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var outputTensor, inferenceResult, pose, numValidKeypoints, i;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        outputTensor = this.moveNetModel.execute(inputImage);\r\n                        // We expect an output tensor of shape [1, 1, 17, 3] (batch, person,\r\n                        // keypoint, (y, x, score)).\r\n                        if (outputTensor.shape.length !== 4 || outputTensor.shape[0] !== 1 ||\r\n                            outputTensor.shape[1] !== 1 ||\r\n                            outputTensor.shape[2] !== constants_3.NUM_KEYPOINTS ||\r\n                            outputTensor.shape[3] !== constants_3.NUM_KEYPOINT_VALUES) {\r\n                            outputTensor.dispose();\r\n                            throw new Error(\"Unexpected output shape from model: [\".concat(outputTensor.shape, \"]\"));\r\n                        }\r\n                        if (!(tf.getBackend() !== 'webgpu')) return [3 /*break*/, 1];\r\n                        inferenceResult = outputTensor.dataSync();\r\n                        return [3 /*break*/, 3];\r\n                    case 1: return [4 /*yield*/, outputTensor.data()];\r\n                    case 2:\r\n                        inferenceResult = _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        outputTensor.dispose();\r\n                        pose = { keypoints: [], score: 0.0 };\r\n                        numValidKeypoints = 0;\r\n                        for (i = 0; i < constants_3.NUM_KEYPOINTS; ++i) {\r\n                            pose.keypoints[i] = {\r\n                                y: inferenceResult[i * constants_3.NUM_KEYPOINT_VALUES],\r\n                                x: inferenceResult[i * constants_3.NUM_KEYPOINT_VALUES + 1],\r\n                                score: inferenceResult[i * constants_3.NUM_KEYPOINT_VALUES + 2]\r\n                            };\r\n                            if (pose.keypoints[i].score > constants_3.MIN_CROP_KEYPOINT_SCORE) {\r\n                                ++numValidKeypoints;\r\n                                pose.score += pose.keypoints[i].score;\r\n                            }\r\n                        }\r\n                        if (numValidKeypoints > 0) {\r\n                            pose.score /= numValidKeypoints;\r\n                        }\r\n                        return [2 /*return*/, pose];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Runs inference on an image using a model that is assumed to be a\r\n     * multi-person keypoint model that outputs 17 keypoints and a box for a\r\n     * multiple persons.\r\n     *\r\n     * @param inputImage 4D tensor containing the input image. Should be of size\r\n     * [1, width, height, 3], where width and height are divisible by 32.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.runMultiPersonPoseModel = function (inputImage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var outputTensor, inferenceResult, poses, numInstances, i, boxIndex, scoreIndex, j;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        outputTensor = this.moveNetModel.execute(inputImage);\r\n                        // Multi-pose model output is a [1, n, 56] tensor ([batch, num_instances,\r\n                        // instance_keypoints_and_box]).\r\n                        if (outputTensor.shape.length !== 3 || outputTensor.shape[0] !== 1 ||\r\n                            outputTensor.shape[2] !== constants_3.MULTIPOSE_INSTANCE_SIZE) {\r\n                            outputTensor.dispose();\r\n                            throw new Error(\"Unexpected output shape from model: [\".concat(outputTensor.shape, \"]\"));\r\n                        }\r\n                        if (!(tf.getBackend() !== 'webgpu')) return [3 /*break*/, 1];\r\n                        inferenceResult = outputTensor.dataSync();\r\n                        return [3 /*break*/, 3];\r\n                    case 1: return [4 /*yield*/, outputTensor.data()];\r\n                    case 2:\r\n                        inferenceResult = _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        outputTensor.dispose();\r\n                        poses = [];\r\n                        numInstances = inferenceResult.length / constants_3.MULTIPOSE_INSTANCE_SIZE;\r\n                        for (i = 0; i < numInstances; ++i) {\r\n                            poses[i] = { keypoints: [] };\r\n                            boxIndex = i * constants_3.MULTIPOSE_INSTANCE_SIZE + constants_3.MULTIPOSE_BOX_IDX;\r\n                            poses[i].box = {\r\n                                yMin: inferenceResult[boxIndex],\r\n                                xMin: inferenceResult[boxIndex + 1],\r\n                                yMax: inferenceResult[boxIndex + 2],\r\n                                xMax: inferenceResult[boxIndex + 3],\r\n                                width: inferenceResult[boxIndex + 3] - inferenceResult[boxIndex + 1],\r\n                                height: inferenceResult[boxIndex + 2] - inferenceResult[boxIndex]\r\n                            };\r\n                            scoreIndex = i * constants_3.MULTIPOSE_INSTANCE_SIZE + constants_3.MULTIPOSE_BOX_SCORE_IDX;\r\n                            poses[i].score = inferenceResult[scoreIndex];\r\n                            poses[i].keypoints = [];\r\n                            for (j = 0; j < constants_3.NUM_KEYPOINTS; ++j) {\r\n                                poses[i].keypoints[j] = {\r\n                                    y: inferenceResult[i * constants_3.MULTIPOSE_INSTANCE_SIZE + j * constants_3.NUM_KEYPOINT_VALUES],\r\n                                    x: inferenceResult[i * constants_3.MULTIPOSE_INSTANCE_SIZE + j * constants_3.NUM_KEYPOINT_VALUES + 1],\r\n                                    score: inferenceResult[i * constants_3.MULTIPOSE_INSTANCE_SIZE + j * constants_3.NUM_KEYPOINT_VALUES + 2]\r\n                                };\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, poses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Estimates poses for an image or video frame. This does standard ImageNet\r\n     * pre-processing before inferring through the model. The image pixels should\r\n     * have values [0-255]. It returns an array of poses.\r\n     *\r\n     * @param image ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement\r\n     * The input image to feed through the network.\r\n     * @param config Optional. Currently not used.\r\n     * @param timestamp Optional. In milliseconds. This is useful when image is\r\n     * a tensor, which doesn't have timestamp info. Or to override timestamp in a\r\n     * video.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.estimatePoses = function (image, estimationConfig, timestamp) {\r\n        if (estimationConfig === void 0) { estimationConfig = constants_3.MOVENET_ESTIMATION_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var imageTensor3D, imageSize, imageTensor4D, poses, poseIdx, keypointIdx;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        estimationConfig = (0, detector_utils_1.validateEstimationConfig)(estimationConfig);\r\n                        if (image == null) {\r\n                            this.reset();\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        if (timestamp == null) {\r\n                            if ((0, is_video_1.isVideo)(image)) {\r\n                                timestamp = image.currentTime * constants_2.SECOND_TO_MICRO_SECONDS;\r\n                            }\r\n                        }\r\n                        else {\r\n                            timestamp = timestamp * constants_2.MILLISECOND_TO_MICRO_SECONDS;\r\n                        }\r\n                        imageTensor3D = (0, image_utils_1.toImageTensor)(image);\r\n                        imageSize = (0, image_utils_1.getImageSize)(imageTensor3D);\r\n                        imageTensor4D = tf.expandDims(imageTensor3D, 0);\r\n                        // Make sure we don't dispose the input image if it's already a tensor.\r\n                        if (!(image instanceof tf.Tensor)) {\r\n                            imageTensor3D.dispose();\r\n                        }\r\n                        poses = [];\r\n                        if (!!this.multiPoseModel) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.estimateSinglePose(imageTensor4D, imageSize, timestamp)];\r\n                    case 1:\r\n                        poses =\r\n                            _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 2: return [4 /*yield*/, this.estimateMultiplePoses(imageTensor4D, imageSize, timestamp)];\r\n                    case 3:\r\n                        poses =\r\n                            _a.sent();\r\n                        _a.label = 4;\r\n                    case 4:\r\n                        // Convert keypoint coordinates from normalized coordinates to image space\r\n                        // and add keypoint names.\r\n                        for (poseIdx = 0; poseIdx < poses.length; ++poseIdx) {\r\n                            for (keypointIdx = 0; keypointIdx < poses[poseIdx].keypoints.length; ++keypointIdx) {\r\n                                poses[poseIdx].keypoints[keypointIdx].name =\r\n                                    constants_1.COCO_KEYPOINTS[keypointIdx];\r\n                                poses[poseIdx].keypoints[keypointIdx].y *= imageSize.height;\r\n                                poses[poseIdx].keypoints[keypointIdx].x *= imageSize.width;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, poses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Runs a single-person keypoint model on an image, including the image\r\n     * cropping and keypoint filtering logic.\r\n     *\r\n     * @param imageTensor4D A tf.Tensor4D that contains the input image.\r\n     * @param imageSize: The width and height of the input image.\r\n     * @param timestamp Image timestamp in microseconds.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.estimateSinglePose = function (imageTensor4D, imageSize, timestamp) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var croppedImage, pose, i, nextCropRegion;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.cropRegion) {\r\n                            this.cropRegion = (0, crop_utils_1.initCropRegion)(this.cropRegion == null, imageSize);\r\n                        }\r\n                        croppedImage = tf.tidy(function () {\r\n                            // Crop region is a [batch, 4] size tensor.\r\n                            var cropRegionTensor = tf.tensor2d([[\r\n                                    _this.cropRegion.yMin, _this.cropRegion.xMin, _this.cropRegion.yMax,\r\n                                    _this.cropRegion.xMax\r\n                                ]]);\r\n                            // The batch index that the crop should operate on. A [batch] size\r\n                            // tensor.\r\n                            var boxInd = tf.zeros([1], 'int32');\r\n                            // Target size of each crop.\r\n                            var cropSize = [_this.modelInputResolution.height, _this.modelInputResolution.width];\r\n                            return tf.cast(tf.image.cropAndResize(imageTensor4D, cropRegionTensor, boxInd, cropSize, 'bilinear', 0), 'int32');\r\n                        });\r\n                        imageTensor4D.dispose();\r\n                        return [4 /*yield*/, this.runSinglePersonPoseModel(croppedImage)];\r\n                    case 1:\r\n                        pose = _a.sent();\r\n                        croppedImage.dispose();\r\n                        if (pose.score < this.minPoseScore) {\r\n                            this.reset();\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        // Convert keypoints from crop coordinates to image coordinates.\r\n                        for (i = 0; i < pose.keypoints.length; ++i) {\r\n                            pose.keypoints[i].y =\r\n                                this.cropRegion.yMin + pose.keypoints[i].y * this.cropRegion.height;\r\n                            pose.keypoints[i].x =\r\n                                this.cropRegion.xMin + pose.keypoints[i].x * this.cropRegion.width;\r\n                        }\r\n                        // Apply the sequential filter before estimating the cropping area to make\r\n                        // it more stable.\r\n                        if (timestamp != null && this.enableSmoothing) {\r\n                            pose.keypoints = this.keypointFilter.apply(pose.keypoints, timestamp, 1 /* objectScale */);\r\n                        }\r\n                        nextCropRegion = (0, crop_utils_1.determineNextCropRegion)(this.cropRegion, pose.keypoints, this.keypointIndexByName, imageSize);\r\n                        this.cropRegion = this.filterCropRegion(nextCropRegion);\r\n                        return [2 /*return*/, [pose]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Runs a multi-person keypoint model on an image, including image\r\n     * preprocessing.\r\n     *\r\n     * @param imageTensor4D A tf.Tensor4D that contains the input image.\r\n     * @param imageSize: The width and height of the input image.\r\n     * @param timestamp Image timestamp in microseconds.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.estimateMultiplePoses = function (imageTensor4D, imageSize, timestamp) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var resizedImage, resizedWidth, resizedHeight, paddedImage, paddedWidth, paddedHeight, dimensionDivisor, paddedImageInt32, poses, i, j, i, trackIDs_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        dimensionDivisor = 32;\r\n                        if (imageSize.width > imageSize.height) {\r\n                            resizedWidth = this.multiPoseMaxDimension;\r\n                            resizedHeight = Math.round(this.multiPoseMaxDimension * imageSize.height / imageSize.width);\r\n                            resizedImage =\r\n                                tf.image.resizeBilinear(imageTensor4D, [resizedHeight, resizedWidth]);\r\n                            paddedWidth = resizedWidth;\r\n                            paddedHeight =\r\n                                Math.ceil(resizedHeight / dimensionDivisor) * dimensionDivisor;\r\n                            paddedImage = tf.pad(resizedImage, [[0, 0], [0, paddedHeight - resizedHeight], [0, 0], [0, 0]]);\r\n                        }\r\n                        else {\r\n                            resizedWidth = Math.round(this.multiPoseMaxDimension * imageSize.width / imageSize.height);\r\n                            resizedHeight = this.multiPoseMaxDimension;\r\n                            resizedImage =\r\n                                tf.image.resizeBilinear(imageTensor4D, [resizedHeight, resizedWidth]);\r\n                            paddedWidth =\r\n                                Math.ceil(resizedWidth / dimensionDivisor) * dimensionDivisor;\r\n                            paddedHeight = resizedHeight;\r\n                            paddedImage = tf.pad(resizedImage, [[0, 0], [0, 0], [0, paddedWidth - resizedWidth], [0, 0]]);\r\n                        }\r\n                        resizedImage.dispose();\r\n                        imageTensor4D.dispose();\r\n                        paddedImageInt32 = tf.cast(paddedImage, 'int32');\r\n                        paddedImage.dispose();\r\n                        return [4 /*yield*/, this.runMultiPersonPoseModel(paddedImageInt32)];\r\n                    case 1:\r\n                        poses = _a.sent();\r\n                        paddedImageInt32.dispose();\r\n                        poses = poses.filter(function (pose) { return pose.score >= _this.minPoseScore; });\r\n                        // Convert keypoints from padded coordinates to normalized coordinates.\r\n                        for (i = 0; i < poses.length; ++i) {\r\n                            for (j = 0; j < poses[i].keypoints.length; ++j) {\r\n                                poses[i].keypoints[j].y *= paddedHeight / resizedHeight;\r\n                                poses[i].keypoints[j].x *= paddedWidth / resizedWidth;\r\n                            }\r\n                        }\r\n                        if (this.enableTracking) {\r\n                            this.tracker.apply(poses, timestamp);\r\n                            if (this.enableSmoothing) {\r\n                                for (i = 0; i < poses.length; ++i) {\r\n                                    if (!this.keypointFilterMap.has(poses[i].id)) {\r\n                                        this.keypointFilterMap.set(poses[i].id, new keypoints_one_euro_filter_1.KeypointsOneEuroFilter(constants_3.KEYPOINT_FILTER_CONFIG));\r\n                                    }\r\n                                    poses[i].keypoints =\r\n                                        this.keypointFilterMap.get(poses[i].id)\r\n                                            .apply(poses[i].keypoints, timestamp, 1 /* objectScale */);\r\n                                }\r\n                                trackIDs_1 = this.tracker.getTrackIDs();\r\n                                this.keypointFilterMap.forEach(function (_, trackID) {\r\n                                    if (!trackIDs_1.has(trackID)) {\r\n                                        _this.keypointFilterMap[\"delete\"](trackID);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, poses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MoveNetDetector.prototype.filterCropRegion = function (newCropRegion) {\r\n        if (!newCropRegion) {\r\n            this.cropRegionFilterYMin.reset();\r\n            this.cropRegionFilterXMin.reset();\r\n            this.cropRegionFilterYMax.reset();\r\n            this.cropRegionFilterXMax.reset();\r\n            return null;\r\n        }\r\n        else {\r\n            var filteredYMin = this.cropRegionFilterYMin.apply(newCropRegion.yMin);\r\n            var filteredXMin = this.cropRegionFilterXMin.apply(newCropRegion.xMin);\r\n            var filteredYMax = this.cropRegionFilterYMax.apply(newCropRegion.yMax);\r\n            var filteredXMax = this.cropRegionFilterXMax.apply(newCropRegion.xMax);\r\n            return {\r\n                yMin: filteredYMin,\r\n                xMin: filteredXMin,\r\n                yMax: filteredYMax,\r\n                xMax: filteredXMax,\r\n                height: filteredYMax - filteredYMin,\r\n                width: filteredXMax - filteredXMin\r\n            };\r\n        }\r\n    };\r\n    MoveNetDetector.prototype.dispose = function () {\r\n        this.moveNetModel.dispose();\r\n    };\r\n    MoveNetDetector.prototype.reset = function () {\r\n        this.cropRegion = null;\r\n        this.resetFilters();\r\n    };\r\n    MoveNetDetector.prototype.resetFilters = function () {\r\n        this.keypointFilter.reset();\r\n        this.cropRegionFilterYMin.reset();\r\n        this.cropRegionFilterXMin.reset();\r\n        this.cropRegionFilterYMax.reset();\r\n        this.cropRegionFilterXMax.reset();\r\n    };\r\n    return MoveNetDetector;\r\n}());\r\n/**\r\n * Loads the MoveNet model instance from a checkpoint. The model to be loaded\r\n * is configurable using the config dictionary `ModelConfig`. Please find more\r\n * details in the documentation of the `ModelConfig`.\r\n *\r\n * @param config `ModelConfig` dictionary that contains parameters for\r\n * the MoveNet loading process. Please find more details of each parameter\r\n * in the documentation of the `ModelConfig` interface.\r\n */\r\nfunction load(modelConfig) {\r\n    if (modelConfig === void 0) { modelConfig = constants_3.MOVENET_CONFIG; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var config, model, fromTFHub, modelUrl;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    config = (0, detector_utils_1.validateModelConfig)(modelConfig);\r\n                    fromTFHub = true;\r\n                    if (!!!config.modelUrl) return [3 /*break*/, 2];\r\n                    fromTFHub = typeof config.modelUrl === 'string' &&\r\n                        config.modelUrl.indexOf('https://tfhub.dev') > -1;\r\n                    return [4 /*yield*/, tfc.loadGraphModel(config.modelUrl, { fromTFHub: fromTFHub })];\r\n                case 1:\r\n                    model = _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 2:\r\n                    modelUrl = void 0;\r\n                    if (config.modelType === constants_3.SINGLEPOSE_LIGHTNING) {\r\n                        modelUrl = constants_3.MOVENET_SINGLEPOSE_LIGHTNING_URL;\r\n                    }\r\n                    else if (config.modelType === constants_3.SINGLEPOSE_THUNDER) {\r\n                        modelUrl = constants_3.MOVENET_SINGLEPOSE_THUNDER_URL;\r\n                    }\r\n                    else if (config.modelType === constants_3.MULTIPOSE_LIGHTNING) {\r\n                        modelUrl = constants_3.MOVENET_MULTIPOSE_LIGHTNING_URL;\r\n                    }\r\n                    return [4 /*yield*/, tfc.loadGraphModel(modelUrl, { fromTFHub: fromTFHub })];\r\n                case 3:\r\n                    model = _a.sent();\r\n                    _a.label = 4;\r\n                case 4:\r\n                    if (tf.getBackend() === 'webgl') {\r\n                        // MoveNet has a top-k op that runs faster on GPU for the size of our last\r\n                        // dimension (6400). There are three checks that could make the top-k op run\r\n                        // on CPU (see\r\n                        // https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgl/src/kernels/TopK.ts)\r\n                        //\r\n                        // 1. All input shapes < 128\r\n                        // 2. lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD\r\n                        // 3. k > TOPK_K_CPU_HANDOFF_THRESHOLD\r\n                        //\r\n                        // In our case, setting TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = 0 will\r\n                        // will disable the CPU forwarding.\r\n                        tf.env().set('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', 0);\r\n                    }\r\n                    return [2 /*return*/, new MoveNetDetector(model, config)];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.load = load;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@tensorflow-models/pose-detection/movenet/detector.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}}],"sources":{"node_modules/@tensorflow-models/pose-detection/movenet/detector.js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nexports.__esModule = true;\r\nexports.load = void 0;\r\nvar tfc = require(\"@tensorflow/tfjs-converter\");\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar bounding_box_tracker_1 = require(\"../calculators/bounding_box_tracker\");\r\nvar keypoint_tracker_1 = require(\"../calculators/keypoint_tracker\");\r\nvar types_1 = require(\"../calculators/types\");\r\nvar constants_1 = require(\"../constants\");\r\nvar constants_2 = require(\"../shared/calculators/constants\");\r\nvar image_utils_1 = require(\"../shared/calculators/image_utils\");\r\nvar is_video_1 = require(\"../shared/calculators/is_video\");\r\nvar keypoints_one_euro_filter_1 = require(\"../shared/filters/keypoints_one_euro_filter\");\r\nvar low_pass_filter_1 = require(\"../shared/filters/low_pass_filter\");\r\nvar types_2 = require(\"../types\");\r\nvar util_1 = require(\"../util\");\r\nvar constants_3 = require(\"./constants\");\r\nvar crop_utils_1 = require(\"./crop_utils\");\r\nvar detector_utils_1 = require(\"./detector_utils\");\r\n/**\r\n * MoveNet detector class.\r\n */\r\nvar MoveNetDetector = /** @class */ (function () {\r\n    function MoveNetDetector(moveNetModel, config) {\r\n        this.moveNetModel = moveNetModel;\r\n        this.modelInputResolution = { height: 0, width: 0 };\r\n        this.keypointIndexByName = (0, util_1.getKeypointIndexByName)(types_2.SupportedModels.MoveNet);\r\n        // Only single-pose models have a fixed input resolution.\r\n        if (config.modelType === constants_3.SINGLEPOSE_LIGHTNING) {\r\n            this.modelInputResolution.width = constants_3.MOVENET_SINGLEPOSE_LIGHTNING_RESOLUTION;\r\n            this.modelInputResolution.height =\r\n                constants_3.MOVENET_SINGLEPOSE_LIGHTNING_RESOLUTION;\r\n        }\r\n        else if (config.modelType === constants_3.SINGLEPOSE_THUNDER) {\r\n            this.modelInputResolution.width = constants_3.MOVENET_SINGLEPOSE_THUNDER_RESOLUTION;\r\n            this.modelInputResolution.height = constants_3.MOVENET_SINGLEPOSE_THUNDER_RESOLUTION;\r\n        }\r\n        this.multiPoseModel = config.modelType === constants_3.MULTIPOSE_LIGHTNING;\r\n        if (!this.multiPoseModel) {\r\n            this.keypointFilter = new keypoints_one_euro_filter_1.KeypointsOneEuroFilter(constants_3.KEYPOINT_FILTER_CONFIG);\r\n            this.cropRegionFilterYMin = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n            this.cropRegionFilterXMin = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n            this.cropRegionFilterYMax = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n            this.cropRegionFilterXMax = new low_pass_filter_1.LowPassFilter(constants_3.CROP_FILTER_ALPHA);\r\n        }\r\n        this.enableSmoothing = config.enableSmoothing;\r\n        if (config.minPoseScore) {\r\n            this.minPoseScore = config.minPoseScore;\r\n        }\r\n        else {\r\n            this.minPoseScore = constants_3.DEFAULT_MIN_POSE_SCORE;\r\n        }\r\n        if (config.multiPoseMaxDimension) {\r\n            this.multiPoseMaxDimension = config.multiPoseMaxDimension;\r\n        }\r\n        else {\r\n            this.multiPoseMaxDimension = constants_3.MOVENET_MULTIPOSE_DEFAULT_MAX_DIMENSION;\r\n        }\r\n        this.enableTracking = config.enableTracking;\r\n        if (this.multiPoseModel && this.enableTracking) {\r\n            if (config.trackerType === types_1.TrackerType.Keypoint) {\r\n                this.tracker = new keypoint_tracker_1.KeypointTracker(config.trackerConfig);\r\n            }\r\n            else if (config.trackerType === types_1.TrackerType.BoundingBox) {\r\n                this.tracker = new bounding_box_tracker_1.BoundingBoxTracker(config.trackerConfig);\r\n            }\r\n            if (this.enableSmoothing) {\r\n                this.keypointFilterMap = new Map();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Runs inference on an image using a model that is assumed to be a single\r\n     * person keypoint model that outputs 17 keypoints.\r\n     *\r\n     * @param inputImage 4D tensor containing the input image. Should be of size\r\n     * [1, modelHeight, modelWidth, 3].\r\n     * @return A `Pose`.\r\n     */\r\n    MoveNetDetector.prototype.runSinglePersonPoseModel = function (inputImage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var outputTensor, inferenceResult, pose, numValidKeypoints, i;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        outputTensor = this.moveNetModel.execute(inputImage);\r\n                        // We expect an output tensor of shape [1, 1, 17, 3] (batch, person,\r\n                        // keypoint, (y, x, score)).\r\n                        if (outputTensor.shape.length !== 4 || outputTensor.shape[0] !== 1 ||\r\n                            outputTensor.shape[1] !== 1 ||\r\n                            outputTensor.shape[2] !== constants_3.NUM_KEYPOINTS ||\r\n                            outputTensor.shape[3] !== constants_3.NUM_KEYPOINT_VALUES) {\r\n                            outputTensor.dispose();\r\n                            throw new Error(\"Unexpected output shape from model: [\".concat(outputTensor.shape, \"]\"));\r\n                        }\r\n                        if (!(tf.getBackend() !== 'webgpu')) return [3 /*break*/, 1];\r\n                        inferenceResult = outputTensor.dataSync();\r\n                        return [3 /*break*/, 3];\r\n                    case 1: return [4 /*yield*/, outputTensor.data()];\r\n                    case 2:\r\n                        inferenceResult = _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        outputTensor.dispose();\r\n                        pose = { keypoints: [], score: 0.0 };\r\n                        numValidKeypoints = 0;\r\n                        for (i = 0; i < constants_3.NUM_KEYPOINTS; ++i) {\r\n                            pose.keypoints[i] = {\r\n                                y: inferenceResult[i * constants_3.NUM_KEYPOINT_VALUES],\r\n                                x: inferenceResult[i * constants_3.NUM_KEYPOINT_VALUES + 1],\r\n                                score: inferenceResult[i * constants_3.NUM_KEYPOINT_VALUES + 2]\r\n                            };\r\n                            if (pose.keypoints[i].score > constants_3.MIN_CROP_KEYPOINT_SCORE) {\r\n                                ++numValidKeypoints;\r\n                                pose.score += pose.keypoints[i].score;\r\n                            }\r\n                        }\r\n                        if (numValidKeypoints > 0) {\r\n                            pose.score /= numValidKeypoints;\r\n                        }\r\n                        return [2 /*return*/, pose];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Runs inference on an image using a model that is assumed to be a\r\n     * multi-person keypoint model that outputs 17 keypoints and a box for a\r\n     * multiple persons.\r\n     *\r\n     * @param inputImage 4D tensor containing the input image. Should be of size\r\n     * [1, width, height, 3], where width and height are divisible by 32.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.runMultiPersonPoseModel = function (inputImage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var outputTensor, inferenceResult, poses, numInstances, i, boxIndex, scoreIndex, j;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        outputTensor = this.moveNetModel.execute(inputImage);\r\n                        // Multi-pose model output is a [1, n, 56] tensor ([batch, num_instances,\r\n                        // instance_keypoints_and_box]).\r\n                        if (outputTensor.shape.length !== 3 || outputTensor.shape[0] !== 1 ||\r\n                            outputTensor.shape[2] !== constants_3.MULTIPOSE_INSTANCE_SIZE) {\r\n                            outputTensor.dispose();\r\n                            throw new Error(\"Unexpected output shape from model: [\".concat(outputTensor.shape, \"]\"));\r\n                        }\r\n                        if (!(tf.getBackend() !== 'webgpu')) return [3 /*break*/, 1];\r\n                        inferenceResult = outputTensor.dataSync();\r\n                        return [3 /*break*/, 3];\r\n                    case 1: return [4 /*yield*/, outputTensor.data()];\r\n                    case 2:\r\n                        inferenceResult = _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        outputTensor.dispose();\r\n                        poses = [];\r\n                        numInstances = inferenceResult.length / constants_3.MULTIPOSE_INSTANCE_SIZE;\r\n                        for (i = 0; i < numInstances; ++i) {\r\n                            poses[i] = { keypoints: [] };\r\n                            boxIndex = i * constants_3.MULTIPOSE_INSTANCE_SIZE + constants_3.MULTIPOSE_BOX_IDX;\r\n                            poses[i].box = {\r\n                                yMin: inferenceResult[boxIndex],\r\n                                xMin: inferenceResult[boxIndex + 1],\r\n                                yMax: inferenceResult[boxIndex + 2],\r\n                                xMax: inferenceResult[boxIndex + 3],\r\n                                width: inferenceResult[boxIndex + 3] - inferenceResult[boxIndex + 1],\r\n                                height: inferenceResult[boxIndex + 2] - inferenceResult[boxIndex]\r\n                            };\r\n                            scoreIndex = i * constants_3.MULTIPOSE_INSTANCE_SIZE + constants_3.MULTIPOSE_BOX_SCORE_IDX;\r\n                            poses[i].score = inferenceResult[scoreIndex];\r\n                            poses[i].keypoints = [];\r\n                            for (j = 0; j < constants_3.NUM_KEYPOINTS; ++j) {\r\n                                poses[i].keypoints[j] = {\r\n                                    y: inferenceResult[i * constants_3.MULTIPOSE_INSTANCE_SIZE + j * constants_3.NUM_KEYPOINT_VALUES],\r\n                                    x: inferenceResult[i * constants_3.MULTIPOSE_INSTANCE_SIZE + j * constants_3.NUM_KEYPOINT_VALUES + 1],\r\n                                    score: inferenceResult[i * constants_3.MULTIPOSE_INSTANCE_SIZE + j * constants_3.NUM_KEYPOINT_VALUES + 2]\r\n                                };\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, poses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Estimates poses for an image or video frame. This does standard ImageNet\r\n     * pre-processing before inferring through the model. The image pixels should\r\n     * have values [0-255]. It returns an array of poses.\r\n     *\r\n     * @param image ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement\r\n     * The input image to feed through the network.\r\n     * @param config Optional. Currently not used.\r\n     * @param timestamp Optional. In milliseconds. This is useful when image is\r\n     * a tensor, which doesn't have timestamp info. Or to override timestamp in a\r\n     * video.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.estimatePoses = function (image, estimationConfig, timestamp) {\r\n        if (estimationConfig === void 0) { estimationConfig = constants_3.MOVENET_ESTIMATION_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var imageTensor3D, imageSize, imageTensor4D, poses, poseIdx, keypointIdx;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        estimationConfig = (0, detector_utils_1.validateEstimationConfig)(estimationConfig);\r\n                        if (image == null) {\r\n                            this.reset();\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        if (timestamp == null) {\r\n                            if ((0, is_video_1.isVideo)(image)) {\r\n                                timestamp = image.currentTime * constants_2.SECOND_TO_MICRO_SECONDS;\r\n                            }\r\n                        }\r\n                        else {\r\n                            timestamp = timestamp * constants_2.MILLISECOND_TO_MICRO_SECONDS;\r\n                        }\r\n                        imageTensor3D = (0, image_utils_1.toImageTensor)(image);\r\n                        imageSize = (0, image_utils_1.getImageSize)(imageTensor3D);\r\n                        imageTensor4D = tf.expandDims(imageTensor3D, 0);\r\n                        // Make sure we don't dispose the input image if it's already a tensor.\r\n                        if (!(image instanceof tf.Tensor)) {\r\n                            imageTensor3D.dispose();\r\n                        }\r\n                        poses = [];\r\n                        if (!!this.multiPoseModel) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.estimateSinglePose(imageTensor4D, imageSize, timestamp)];\r\n                    case 1:\r\n                        poses =\r\n                            _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 2: return [4 /*yield*/, this.estimateMultiplePoses(imageTensor4D, imageSize, timestamp)];\r\n                    case 3:\r\n                        poses =\r\n                            _a.sent();\r\n                        _a.label = 4;\r\n                    case 4:\r\n                        // Convert keypoint coordinates from normalized coordinates to image space\r\n                        // and add keypoint names.\r\n                        for (poseIdx = 0; poseIdx < poses.length; ++poseIdx) {\r\n                            for (keypointIdx = 0; keypointIdx < poses[poseIdx].keypoints.length; ++keypointIdx) {\r\n                                poses[poseIdx].keypoints[keypointIdx].name =\r\n                                    constants_1.COCO_KEYPOINTS[keypointIdx];\r\n                                poses[poseIdx].keypoints[keypointIdx].y *= imageSize.height;\r\n                                poses[poseIdx].keypoints[keypointIdx].x *= imageSize.width;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, poses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Runs a single-person keypoint model on an image, including the image\r\n     * cropping and keypoint filtering logic.\r\n     *\r\n     * @param imageTensor4D A tf.Tensor4D that contains the input image.\r\n     * @param imageSize: The width and height of the input image.\r\n     * @param timestamp Image timestamp in microseconds.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.estimateSinglePose = function (imageTensor4D, imageSize, timestamp) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var croppedImage, pose, i, nextCropRegion;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.cropRegion) {\r\n                            this.cropRegion = (0, crop_utils_1.initCropRegion)(this.cropRegion == null, imageSize);\r\n                        }\r\n                        croppedImage = tf.tidy(function () {\r\n                            // Crop region is a [batch, 4] size tensor.\r\n                            var cropRegionTensor = tf.tensor2d([[\r\n                                    _this.cropRegion.yMin, _this.cropRegion.xMin, _this.cropRegion.yMax,\r\n                                    _this.cropRegion.xMax\r\n                                ]]);\r\n                            // The batch index that the crop should operate on. A [batch] size\r\n                            // tensor.\r\n                            var boxInd = tf.zeros([1], 'int32');\r\n                            // Target size of each crop.\r\n                            var cropSize = [_this.modelInputResolution.height, _this.modelInputResolution.width];\r\n                            return tf.cast(tf.image.cropAndResize(imageTensor4D, cropRegionTensor, boxInd, cropSize, 'bilinear', 0), 'int32');\r\n                        });\r\n                        imageTensor4D.dispose();\r\n                        return [4 /*yield*/, this.runSinglePersonPoseModel(croppedImage)];\r\n                    case 1:\r\n                        pose = _a.sent();\r\n                        croppedImage.dispose();\r\n                        if (pose.score < this.minPoseScore) {\r\n                            this.reset();\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        // Convert keypoints from crop coordinates to image coordinates.\r\n                        for (i = 0; i < pose.keypoints.length; ++i) {\r\n                            pose.keypoints[i].y =\r\n                                this.cropRegion.yMin + pose.keypoints[i].y * this.cropRegion.height;\r\n                            pose.keypoints[i].x =\r\n                                this.cropRegion.xMin + pose.keypoints[i].x * this.cropRegion.width;\r\n                        }\r\n                        // Apply the sequential filter before estimating the cropping area to make\r\n                        // it more stable.\r\n                        if (timestamp != null && this.enableSmoothing) {\r\n                            pose.keypoints = this.keypointFilter.apply(pose.keypoints, timestamp, 1 /* objectScale */);\r\n                        }\r\n                        nextCropRegion = (0, crop_utils_1.determineNextCropRegion)(this.cropRegion, pose.keypoints, this.keypointIndexByName, imageSize);\r\n                        this.cropRegion = this.filterCropRegion(nextCropRegion);\r\n                        return [2 /*return*/, [pose]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Runs a multi-person keypoint model on an image, including image\r\n     * preprocessing.\r\n     *\r\n     * @param imageTensor4D A tf.Tensor4D that contains the input image.\r\n     * @param imageSize: The width and height of the input image.\r\n     * @param timestamp Image timestamp in microseconds.\r\n     * @return An array of `Pose`s.\r\n     */\r\n    MoveNetDetector.prototype.estimateMultiplePoses = function (imageTensor4D, imageSize, timestamp) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var resizedImage, resizedWidth, resizedHeight, paddedImage, paddedWidth, paddedHeight, dimensionDivisor, paddedImageInt32, poses, i, j, i, trackIDs_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        dimensionDivisor = 32;\r\n                        if (imageSize.width > imageSize.height) {\r\n                            resizedWidth = this.multiPoseMaxDimension;\r\n                            resizedHeight = Math.round(this.multiPoseMaxDimension * imageSize.height / imageSize.width);\r\n                            resizedImage =\r\n                                tf.image.resizeBilinear(imageTensor4D, [resizedHeight, resizedWidth]);\r\n                            paddedWidth = resizedWidth;\r\n                            paddedHeight =\r\n                                Math.ceil(resizedHeight / dimensionDivisor) * dimensionDivisor;\r\n                            paddedImage = tf.pad(resizedImage, [[0, 0], [0, paddedHeight - resizedHeight], [0, 0], [0, 0]]);\r\n                        }\r\n                        else {\r\n                            resizedWidth = Math.round(this.multiPoseMaxDimension * imageSize.width / imageSize.height);\r\n                            resizedHeight = this.multiPoseMaxDimension;\r\n                            resizedImage =\r\n                                tf.image.resizeBilinear(imageTensor4D, [resizedHeight, resizedWidth]);\r\n                            paddedWidth =\r\n                                Math.ceil(resizedWidth / dimensionDivisor) * dimensionDivisor;\r\n                            paddedHeight = resizedHeight;\r\n                            paddedImage = tf.pad(resizedImage, [[0, 0], [0, 0], [0, paddedWidth - resizedWidth], [0, 0]]);\r\n                        }\r\n                        resizedImage.dispose();\r\n                        imageTensor4D.dispose();\r\n                        paddedImageInt32 = tf.cast(paddedImage, 'int32');\r\n                        paddedImage.dispose();\r\n                        return [4 /*yield*/, this.runMultiPersonPoseModel(paddedImageInt32)];\r\n                    case 1:\r\n                        poses = _a.sent();\r\n                        paddedImageInt32.dispose();\r\n                        poses = poses.filter(function (pose) { return pose.score >= _this.minPoseScore; });\r\n                        // Convert keypoints from padded coordinates to normalized coordinates.\r\n                        for (i = 0; i < poses.length; ++i) {\r\n                            for (j = 0; j < poses[i].keypoints.length; ++j) {\r\n                                poses[i].keypoints[j].y *= paddedHeight / resizedHeight;\r\n                                poses[i].keypoints[j].x *= paddedWidth / resizedWidth;\r\n                            }\r\n                        }\r\n                        if (this.enableTracking) {\r\n                            this.tracker.apply(poses, timestamp);\r\n                            if (this.enableSmoothing) {\r\n                                for (i = 0; i < poses.length; ++i) {\r\n                                    if (!this.keypointFilterMap.has(poses[i].id)) {\r\n                                        this.keypointFilterMap.set(poses[i].id, new keypoints_one_euro_filter_1.KeypointsOneEuroFilter(constants_3.KEYPOINT_FILTER_CONFIG));\r\n                                    }\r\n                                    poses[i].keypoints =\r\n                                        this.keypointFilterMap.get(poses[i].id)\r\n                                            .apply(poses[i].keypoints, timestamp, 1 /* objectScale */);\r\n                                }\r\n                                trackIDs_1 = this.tracker.getTrackIDs();\r\n                                this.keypointFilterMap.forEach(function (_, trackID) {\r\n                                    if (!trackIDs_1.has(trackID)) {\r\n                                        _this.keypointFilterMap[\"delete\"](trackID);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, poses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MoveNetDetector.prototype.filterCropRegion = function (newCropRegion) {\r\n        if (!newCropRegion) {\r\n            this.cropRegionFilterYMin.reset();\r\n            this.cropRegionFilterXMin.reset();\r\n            this.cropRegionFilterYMax.reset();\r\n            this.cropRegionFilterXMax.reset();\r\n            return null;\r\n        }\r\n        else {\r\n            var filteredYMin = this.cropRegionFilterYMin.apply(newCropRegion.yMin);\r\n            var filteredXMin = this.cropRegionFilterXMin.apply(newCropRegion.xMin);\r\n            var filteredYMax = this.cropRegionFilterYMax.apply(newCropRegion.yMax);\r\n            var filteredXMax = this.cropRegionFilterXMax.apply(newCropRegion.xMax);\r\n            return {\r\n                yMin: filteredYMin,\r\n                xMin: filteredXMin,\r\n                yMax: filteredYMax,\r\n                xMax: filteredXMax,\r\n                height: filteredYMax - filteredYMin,\r\n                width: filteredXMax - filteredXMin\r\n            };\r\n        }\r\n    };\r\n    MoveNetDetector.prototype.dispose = function () {\r\n        this.moveNetModel.dispose();\r\n    };\r\n    MoveNetDetector.prototype.reset = function () {\r\n        this.cropRegion = null;\r\n        this.resetFilters();\r\n    };\r\n    MoveNetDetector.prototype.resetFilters = function () {\r\n        this.keypointFilter.reset();\r\n        this.cropRegionFilterYMin.reset();\r\n        this.cropRegionFilterXMin.reset();\r\n        this.cropRegionFilterYMax.reset();\r\n        this.cropRegionFilterXMax.reset();\r\n    };\r\n    return MoveNetDetector;\r\n}());\r\n/**\r\n * Loads the MoveNet model instance from a checkpoint. The model to be loaded\r\n * is configurable using the config dictionary `ModelConfig`. Please find more\r\n * details in the documentation of the `ModelConfig`.\r\n *\r\n * @param config `ModelConfig` dictionary that contains parameters for\r\n * the MoveNet loading process. Please find more details of each parameter\r\n * in the documentation of the `ModelConfig` interface.\r\n */\r\nfunction load(modelConfig) {\r\n    if (modelConfig === void 0) { modelConfig = constants_3.MOVENET_CONFIG; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var config, model, fromTFHub, modelUrl;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    config = (0, detector_utils_1.validateModelConfig)(modelConfig);\r\n                    fromTFHub = true;\r\n                    if (!!!config.modelUrl) return [3 /*break*/, 2];\r\n                    fromTFHub = typeof config.modelUrl === 'string' &&\r\n                        config.modelUrl.indexOf('https://tfhub.dev') > -1;\r\n                    return [4 /*yield*/, tfc.loadGraphModel(config.modelUrl, { fromTFHub: fromTFHub })];\r\n                case 1:\r\n                    model = _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 2:\r\n                    modelUrl = void 0;\r\n                    if (config.modelType === constants_3.SINGLEPOSE_LIGHTNING) {\r\n                        modelUrl = constants_3.MOVENET_SINGLEPOSE_LIGHTNING_URL;\r\n                    }\r\n                    else if (config.modelType === constants_3.SINGLEPOSE_THUNDER) {\r\n                        modelUrl = constants_3.MOVENET_SINGLEPOSE_THUNDER_URL;\r\n                    }\r\n                    else if (config.modelType === constants_3.MULTIPOSE_LIGHTNING) {\r\n                        modelUrl = constants_3.MOVENET_MULTIPOSE_LIGHTNING_URL;\r\n                    }\r\n                    return [4 /*yield*/, tfc.loadGraphModel(modelUrl, { fromTFHub: fromTFHub })];\r\n                case 3:\r\n                    model = _a.sent();\r\n                    _a.label = 4;\r\n                case 4:\r\n                    if (tf.getBackend() === 'webgl') {\r\n                        // MoveNet has a top-k op that runs faster on GPU for the size of our last\r\n                        // dimension (6400). There are three checks that could make the top-k op run\r\n                        // on CPU (see\r\n                        // https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgl/src/kernels/TopK.ts)\r\n                        //\r\n                        // 1. All input shapes < 128\r\n                        // 2. lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD\r\n                        // 3. k > TOPK_K_CPU_HANDOFF_THRESHOLD\r\n                        //\r\n                        // In our case, setting TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = 0 will\r\n                        // will disable the CPU forwarding.\r\n                        tf.env().set('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', 0);\r\n                    }\r\n                    return [2 /*return*/, new MoveNetDetector(model, config)];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.load = load;\r\n"},"lineCount":544}},"error":null,"hash":"b602b1615903e721ab7b6806030ffc92","cacheData":{"env":{}}}